// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
}

model User {
  id            String    @unique @default(cuid())
  clerkId       String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  subscription Subscription?
  pages        Page[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [clerkId])
  stripeCustomerId       String    @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@id([userId, stripeCustomerId])
}

model Page {
  id          String     @id @default(cuid())
  name        String
  description String
  slug        String     @unique
  public      Boolean
  userId      String
  user        User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  pageLinks   PageLink[]
  icon        String?
  bgColor     String    @default("#000")
}

model PageLink {
  id     String @id @default(cuid())
  title  String
  url    String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId String
  icon String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}